
@{
    Layout = "~/Areas/Dashboard/Views/Shared/_Layout.cshtml";
}

@model BrandViewModel
<!--<script src="~/assets/js/plugins/dropify/dropify.min.js"></script>-->
<div class="box">
    <div class="box-head">
        <h4 class="title">@Captions.CreateBrand</h4>
    </div>
    <div id="box-body-container" class="box-body">
        <div id="brand-form-container">

        </div>
    </div>
</div>

<br />

<div class="box">
    <div class="box-head">
        <h4 class="title">@Captions.BrandForm</h4>
    </div>
    <div class="box-body">
        <div class="k-rtl">
            <kendo-grid name="grid">
                <datasource type="DataSourceTagHelperType.Ajax" page-size="10">
                    <transport>
                        <read url="@Url.Action(Constants.ActionReadAll, Constants.ControllerBrand, new { area=Constants.AreaManagement })" />
                        <update url="@Url.Action(Constants.ActionUpdate, Constants.ControllerBrand, new { area=Constants.AreaManagement })" />
                    </transport>
                    <schema>
                        <model id="@nameof(BrandViewModel.Id)">
                            <fields>
                                <field name="@nameof(BrandViewModel.Id)" type="number"></field>
                                <field name="@nameof(BrandViewModel.Title)"></field>
                            </fields>
                        </model>
                    </schema>
                </datasource>
                <filterable enabled="true" />
                <pageable button-count="5" refresh="true" page-sizes="new int[] { 5, 10, 20, 50 }">
                </pageable>
                <sortable enabled="true" />
                <columns>
                    <column selectable="true" width="50" />
                    <column field="@nameof(BrandViewModel.Title)" title="@Fields.TitleInput" />
                    @*<column field="@nameof(BrandViewModel.Image)" title="@Fields.ImageInput" template="#=template(data)#" />*@

                    <column width="150">
                        <commands>
                            <column-command name="edit" text="@Fields.EditButtin" click="openEditWindow" icon-class="ti-pencil-alt icon" template="#=buttonTemplate(data)#"></column-command>
                            <column-command name="delete" text="@Fields.DeleteButton" click="openDeleteWindow" icon-class="ti-trash icon" template="#=buttonTemplate(data)#"></column-command>
                        </commands>
                    </column>
                </columns>
            </kendo-grid>
        </div>
    </div>
</div>

<script type="text/javascript">
    function success(result) {
        if (result) {
            switch (result.Type) {
                case 'Success':
                    refreshGrid();
                    getCreateForm();
                    addalert(result.Message, 'success', '@Html.Raw(Fields.ToasterSuccessTitle)');
                    break;
                case 'Error':
                    addalert(result.Message, 'error', '@Html.Raw(Fields.ToasterErrorTitle)');
                    break;
            }
        }
    }
    function submitForm(divName, e, data = null) {
        var submitdata = data !== null ? data : new FormData($("#"+divName)[0]);
        //var formAction = $("#"+btnName).attr("action");
        var formAction = e.formAction;

        if (data !== null) {
            $.post({
                url: formAction,
                data: submitdata,
                success: function (result) {
                    success(result);
                },
                error: function (errorData) {
                    console.log(errorData);
                }
            });
            return;
        }

        if ($("#" + divName).valid()) {
            $.ajax({
                url: formAction,
                data: submitdata,
                processData: false,
                contentType:  false,
                type: 'POST',
                success: function (result) {
                    success(result);
                },
                error: function (errorData) {
                        console.log(errorData);
                    }
            });
        }
    }
    function buttonTemplate(data) {
        //return `<a role="button" class="k-button k-button-icontext ${data.className}" href="#"><span class="${data.iconClass}"></span>${data.text}</a>`
        return `<a role="button" class="btn ${data.className}" href="#"><span class="${data.iconClass}"></span></a>`
    }
	@*function template(data) {
		let path = String.raw`../@Constants.PathBrandImageRead/` + data.Image;
		return String.raw`<div class="brand-photo" style="background-image: url(${String.raw`${path}`});"></div>
<input class='imgName' type='hidden' value='${data.Image}'/>`
	}*@
    function addalert(msg, type, title) {
        toastr.options = {
            tapToDismiss: true,
            closeButton: false,
            showDuration: 100,
            hideDuration: 100,
            extendedTimeOut: 200,
            timeOut: 3000, // Set timeOut and extendedTimeOut to 0 to make it sticky
            closeHtml: '<button type="button"><span class="ti-close"></span></button>',
            closeClass: 'toast-close-button',
            newestOnTop: true,
            preventDuplicates: false,
            progressBar: false,
            rtl: true,
            positionClass: 'toast-top-center'
        };
        toastr[type](msg,title);
    }
	function getCreateForm() {
        $.get({
            url: "@Url.Action(Constants.ActionCreate, Constants.ControllerBrand)",
            success: function(data) {
                $('#brand-form-container').html(data);
            },
            async: false
        });
	}
	function getUpdateForm(id) {
        $.get({
            url: `@Url.Action(Constants.ActionUpdate, Constants.ControllerBrand)/${id}`,
            success: function (data) {
                $('#brand-form-container').html(data);
            },
            async: false
        });
	}
	function refreshGrid() {
		$("#grid").data("kendoGrid").dataSource.read();
    }
	function getDataItem(grid, e)
	{
		let button = e.target;
		let row = $(button).closest("tr");
		return grid.dataItem(row);
	}
	function openEditWindow(e) {
		let dataItem = getDataItem(this, e);
		getUpdateForm(dataItem.Id);
	}
	function openDeleteWindow(e) {
		e.preventDefault();
        let dataItem = getDataItem(this, e);
        let $action = $('<button />');

        swal({
            text: "@Html.Raw(Messages.DeleteCautionMessage)",
            title: `@Html.Raw(Captions.Brand): ${dataItem.Title}`,
            icon: "warning",
            dangerMode: true,
            buttons: {
                confirm: {
                    text: "@Html.Raw(Fields.DeleteButton)",
                    value: "confirm",
                },
                cancel: "@Html.Raw(Fields.CancelButton)"
            },
        })
        .then((value) => {
            if (value === "confirm") {
                $action.formAction = "@Url.Action(Constants.ActionDelete, Constants.ControllerBrand)";
                let $token = $('form > input[name="__RequestVerificationToken"]').val();
                let $data = {
                    __RequestVerificationToken: $token,
                    Id: dataItem.Id
                };
                submitForm('brandform' , $action, $data);
            }
        });
    }
    $(document).ready(function () {
        getCreateForm();
		$.validator.unobtrusive.parse("#brandform");
    });
</script>

<style type="text/css">
    .brand-photo {
        display: inline-block;
        width: 50px;
        height: 50px;
        background-size: 50px 50px;
        background-position: center center;
        vertical-align: middle;
        line-height: 50px;
    }

    .k-grid-edit:hover {
        /*border-color: #28a745;*/
        color: #28a745;
    }

    .k-grid-delete:hover {
        /*border-color: #dc3545;*/
        color: #dc3545;
    }

    .icon {
        margin: 0.2em;
        font-weight: 100;
        font-size: 1.25em;
    }
</style>